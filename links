https://www.digitalocean.com/community/tutorials/how-to-use-struct-tags-in-go
https://betterstack.com/community/guides/scaling-go/json-in-go/
https://medium.com/@chaewonkong/go-and-json-a-comprehensive-guide-to-working-with-json-in-golang-143fa2dfa897

https://refactoring.guru/design-patterns/go
https://github.com/AlexanderGrom/go-patterns

https://medium.com/swlh/inheritance-in-go-94d47d52b577
https://medium.com/@peterbi_91340/implement-true-inheritance-in-go-ff6243bfd7a8


https://attilaolah.eu/2014/09/10/json-and-struct-composition-in-go/

https://gobyexample.com/
https://go.dev/doc/effective_go
https://blog.boot.dev/golang/empty-vs-nil-slices-golang/



package main
 
import (
	"encoding/json"
	"os"
)

type BlogPost struct {
	URL   string `json:"url"`
	Title string `json:"title"`
}

type Analytics struct {
	Visitors int `json:"visitors"`
}

type Qwe struct {
	*BlogPost
	*Analytics
	PageViews int `json:"page_views"`
}

func main() {
	qwe := Qwe{}

	json.Unmarshal([]byte(`{
	  "url": "attila@attilaolah.eu",
	  "title": "Attila's Blog",
	  "visitors": 6,
	  "page_views": 14
	}`), &qwe)

	json.NewEncoder(os.Stdout).Encode(qwe)
}
